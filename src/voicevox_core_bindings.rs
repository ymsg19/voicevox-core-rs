/* automatically generated by rust-bindgen 0.59.1 */

extern crate libloading;
pub struct VoicevoxCore {
    __library: ::libloading::Library,
    pub initialize:
        unsafe extern "C" fn(root_dir_path: *const ::std::os::raw::c_char, use_gpu: bool) -> bool,
    pub finalize: unsafe extern "C" fn(),
    pub metas: unsafe extern "C" fn() -> *const ::std::os::raw::c_char,
    pub yukarin_s_forward: unsafe extern "C" fn(
        length: ::std::os::raw::c_int,
        phoneme_list: *mut ::std::os::raw::c_long,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool,
    pub yukarin_sa_forward: unsafe extern "C" fn(
        length: ::std::os::raw::c_int,
        vowel_phoneme_list: *mut ::std::os::raw::c_long,
        consonant_phoneme_list: *mut ::std::os::raw::c_long,
        start_accent_list: *mut ::std::os::raw::c_long,
        end_accent_list: *mut ::std::os::raw::c_long,
        start_accent_phrase_list: *mut ::std::os::raw::c_long,
        end_accent_phrase_list: *mut ::std::os::raw::c_long,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool,
    pub decode_forward: unsafe extern "C" fn(
        length: ::std::os::raw::c_int,
        phoneme_size: ::std::os::raw::c_int,
        f0: *mut f32,
        phoneme: *mut f32,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool,
    pub last_error_message: unsafe extern "C" fn() -> *const ::std::os::raw::c_char,
}
impl VoicevoxCore {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let initialize = __library.get(b"initialize\0").map(|sym| *sym)?;
        let finalize = __library.get(b"finalize\0").map(|sym| *sym)?;
        let metas = __library.get(b"metas\0").map(|sym| *sym)?;
        let yukarin_s_forward = __library.get(b"yukarin_s_forward\0").map(|sym| *sym)?;
        let yukarin_sa_forward = __library.get(b"yukarin_sa_forward\0").map(|sym| *sym)?;
        let decode_forward = __library.get(b"decode_forward\0").map(|sym| *sym)?;
        let last_error_message = __library.get(b"last_error_message\0").map(|sym| *sym)?;
        Ok(VoicevoxCore {
            __library,
            initialize,
            finalize,
            metas,
            yukarin_s_forward,
            yukarin_sa_forward,
            decode_forward,
            last_error_message,
        })
    }
    pub unsafe fn initialize(
        &self,
        root_dir_path: *const ::std::os::raw::c_char,
        use_gpu: bool,
    ) -> bool {
        (self.initialize)(root_dir_path, use_gpu)
    }
    pub unsafe fn finalize(&self) -> () {
        (self.finalize)()
    }
    pub unsafe fn metas(&self) -> *const ::std::os::raw::c_char {
        (self.metas)()
    }
    pub unsafe fn yukarin_s_forward(
        &self,
        length: ::std::os::raw::c_int,
        phoneme_list: *mut ::std::os::raw::c_long,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool {
        (self.yukarin_s_forward)(length, phoneme_list, speaker_id, output)
    }
    pub unsafe fn yukarin_sa_forward(
        &self,
        length: ::std::os::raw::c_int,
        vowel_phoneme_list: *mut ::std::os::raw::c_long,
        consonant_phoneme_list: *mut ::std::os::raw::c_long,
        start_accent_list: *mut ::std::os::raw::c_long,
        end_accent_list: *mut ::std::os::raw::c_long,
        start_accent_phrase_list: *mut ::std::os::raw::c_long,
        end_accent_phrase_list: *mut ::std::os::raw::c_long,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool {
        (self.yukarin_sa_forward)(
            length,
            vowel_phoneme_list,
            consonant_phoneme_list,
            start_accent_list,
            end_accent_list,
            start_accent_phrase_list,
            end_accent_phrase_list,
            speaker_id,
            output,
        )
    }
    pub unsafe fn decode_forward(
        &self,
        length: ::std::os::raw::c_int,
        phoneme_size: ::std::os::raw::c_int,
        f0: *mut f32,
        phoneme: *mut f32,
        speaker_id: *mut ::std::os::raw::c_long,
        output: *mut f32,
    ) -> bool {
        (self.decode_forward)(length, phoneme_size, f0, phoneme, speaker_id, output)
    }
    pub unsafe fn last_error_message(&self) -> *const ::std::os::raw::c_char {
        (self.last_error_message)()
    }
}
